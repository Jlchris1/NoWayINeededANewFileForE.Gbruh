local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TeleportService = game:GetService("TeleportService")

local localPlayer = Players.LocalPlayer
local spinRemote = ReplicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpinHandler")
local spawnRemote = ReplicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local placementRemote = ReplicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("PlacementRequest")

-- Helper function to get current slot ID text
local function getCurrentElementIDText()
	local playerGui = localPlayer:WaitForChild("PlayerGui")
	local gameUI = playerGui:WaitForChild("GameUI")
	local slotFrame = gameUI:WaitForChild("SlotFrame")
	local currentSlotFrame = slotFrame:WaitForChild("CurrentSlotFrame")
	local currentElement = currentSlotFrame:WaitForChild("CurrentElement")
	local idLabel = currentElement:WaitForChild("ID")
	return idLabel.Text
end

-- Wait for ID.Text change with timeout
local function waitForTextChange(oldText, timeout)
	timeout = timeout or 3
	local startTime = tick()
	while tick() - startTime < timeout do
		local newText = getCurrentElementIDText()
		if newText ~= oldText then
			return newText
		end
		wait(0.1)
	end
	return getCurrentElementIDText()
end

-- Teleport player to position
local function teleportPlayerTo(position)
	local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
	local hrp = character:WaitForChild("HumanoidRootPart")
	hrp.CFrame = CFrame.new(position)
end

-- Equip tool by name, returns true if equipped
local function equipTool(toolName)
	local backpack = localPlayer:WaitForChild("Backpack")
	local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()

	local tool = backpack:FindFirstChild(toolName)
	if not tool then return false end

	tool.Parent = character
	-- Wait until tool is equipped
	local equipped = false
	local conn
	conn = character.ChildAdded:Connect(function(child)
		if child == tool then
			equipped = true
			conn:Disconnect()
		end
	end)

	-- Also try to equip via Humanoid
	local humanoid = character:WaitForChild("Humanoid")
	humanoid:EquipTool(tool)

	-- Wait a max of 3 seconds for equip
	local timeout = tick() + 3
	while not equipped and tick() < timeout do
		wait(0.1)
	end

	return equipped
end

-- Check if all blueprints destroyed
local function allBlueprintsDestroyed()
	local itemHolder = Workspace:FindFirstChild("itemHolder")
	if not itemHolder then return true end
	local parts = itemHolder:GetChildren()
	for _, part in ipairs(parts) do
		if part.Name == "PlacementBuildingPart" and part:IsDescendantOf(Workspace) then
			return false
		end
	end
	return true
end

-- Teleport player sequentially to blueprints, looping until all destroyed
local function processBlueprintsLoop()
	while true do
		local itemHolder = Workspace:FindFirstChild("itemHolder")
		if not itemHolder then
			wait(1.5)
			continue
		end

		local blueprints = {}
		for _, part in ipairs(itemHolder:GetChildren()) do
			if part.Name == "PlacementBuildingPart" and part:IsDescendantOf(Workspace) then
				table.insert(blueprints, part)
			end
		end

		-- If no blueprints left, break loop
		if #blueprints == 0 then break end

		-- Teleport to each blueprint with a small offset
		for _, bp in ipairs(blueprints) do
			if not bp or not bp:IsDescendantOf(Workspace) then
				continue
			end

			if bp:IsA("BasePart") then
				teleportPlayerTo(bp.Position + Vector3.new(0, 5, 0))
			elseif bp.PrimaryPart then
				teleportPlayerTo(bp.PrimaryPart.Position + Vector3.new(0, 5, 0))
			end
			wait(1.5)
		end
	end
end

-- Main logic

-- Get initial text BEFORE any spins
local initialText = getCurrentElementIDText()

-- Forced first spin (must execute even if already builder)
spinRemote:FireServer()
local spunText = waitForTextChange(initialText, 3)

-- If after first spin it's builder, trigger builder stuff
if spunText == "Builder" then
	Workspace.FallenPartsDestroyHeight = 0/0
	spawnRemote:FireServer(2)
	wait(1.5)
	teleportPlayerTo(Vector3.new(-606, 3, 954))
else
	-- If NOT builder after first spin, start looping spins until builder appears
	while true do
		wait(1.5)

		local currentText = getCurrentElementIDText()
		if currentText == "Builder" then
			break
		end

		spinRemote:FireServer()
		spunText = waitForTextChange(spunText, 3)

		if spunText == "Builder" then
			break
		end
	end

	Workspace.FallenPartsDestroyHeight = 0/0
	spawnRemote:FireServer(2)
	wait(1.5)
	teleportPlayerTo(Vector3.new(-606, 3, 954))
end

-- Wait 2 seconds before firing placement remotes
wait(2)

local mortarPositions = {
	{Position = Vector3.new(-606, 3.2059381008148193, 954), Orientation = Vector3.new(0, 0, 0)},
	{Position = Vector3.new(-598, 3.2059381008148193, 950), Orientation = Vector3.new(0, 0, 0)},
	{Position = Vector3.new(-592, 3.2059381008148193, 948), Orientation = Vector3.new(0, 0, 0)},
}

for _, vec in ipairs(mortarPositions) do
	local args = {
		"Mortar",
		{
			Orientation = vec.Orientation,
			Position = vec.Position,
		}
	}
	placementRemote:FireServer(unpack(args))
	wait(1.2)
end

-- Equip Engineer's Wrench
local equipped = equipTool("Engineer's Wrench")

-- If equipped, loop teleporting through blueprints until all destroyed
if equipped then
	processBlueprintsLoop()
end

-- Wait 3 seconds then auto-rejoin
wait(3)

TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, localPlayer)
